"\n"
"## Introducción a Spring Boot\n"
"\n"
"Spring Boot es un framework de Java basado en Spring que facilita la creación de aplicaciones empresariales y microservicios. Su objetivo principal es simplificar la configuración y puesta en marcha de aplicaciones Spring, eliminando la necesidad de una configuración extensa.\n"
"\n"
"### Características principales:\n\n"
"- **Autoconfiguración**: Spring Boot configura automáticamente los componentes según las dependencias presentes en el proyecto.\n\n"
"- **Standalone**: No requiere un servidor de aplicaciones externo como Tomcat o Jetty.\n\n"
"- **Manejo de dependencias**: Usa `Spring Boot Starter` para gestionar dependencias fácilmente.\n\n"
"- **Spring Boot Actuator**: Proporciona monitoreo y métricas para aplicaciones en producción.\n"
"\n"
"## Ejemplo de uso\n"
"\n"
"A continuación, un ejemplo de una aplicación simple con Spring Boot que expone un servicio REST.\n"
"\n"
"### 1. Agregar dependencias en `pom.xml`\n"
"\n"
"```\n\n"
"<dependencies>\n\n"
"    <!-- Dependencia principal de Spring Boot -->\n\n"
"    <dependency>\n\n"
"        <groupId>org.springframework.boot</groupId>\n\n"
"        <artifactId>spring-boot-starter-web</artifactId>\n\n"
"    </dependency>\n"
"    \n"
"    <!-- Plugin de Spring Boot -->\n\n"
"    <dependency>\n\n"
"        <groupId>org.springframework.boot</groupId>\n\n"
"        <artifactId>spring-boot-starter-test</artifactId>\n\n"
"        <scope>test</scope>\n\n"
"    </dependency>\n\n"
"</dependencies>\n"
"```\n"
"\n"
"### 2. Crear la clase principal `Application.java`\n"
"\n"
"```\n\n"
"import org.springframework.boot.SpringApplication;\n\n"
"import org.springframework.boot.autoconfigure.SpringBootApplication;\n"
"\n"
"@SpringBootApplication\n\n"
"public class Application {\n\n"
"    public static void main(String[] args) {\n\n"
"        SpringApplication.run(Application.class, args);\n\n"
"    }\n\n"
"}\n"
"```\n"
"\n"
"### 3. Crear un controlador REST `HelloController.java`\n"
"\n"
"```\n\n"
"import org.springframework.web.bind.annotation.GetMapping;\n\n"
"import org.springframework.web.bind.annotation.RequestMapping;\n\n"
"import org.springframework.web.bind.annotation.RestController;\n"
"\n"
"@RestController\n\n"
"@RequestMapping('/api')\n\n"
"public class HelloController {\n"
"\n"
"    @GetMapping('/hello')\n\n"
"    public String sayHello() {\n\n"
"        return '¡Hola desde Spring Boot!';\n\n"
"    }\n\n"
"}\n"
"```\n"
"\n"
"### 4. Ejecutar la aplicación\n"
"\n"
"Para iniciar la aplicación, usa el siguiente comando en la terminal:\n"
"\n"
"```\n\n"
"mvn spring-boot:run\n"
"```\n"
"\n"
"### 5. Probar el servicio\n"
"\n"
"Una vez en ejecución, puedes acceder a la API en:\n"
"\n"
"```\n\n"
"http://localhost:8080/api/hello\n"
"```\n"
"\n"
"Este endpoint responderá con:\n"
"\n"
"```\n\n"
"¡Hola desde Spring Boot!\n"
"```\n"
"\n"
"Este es un ejemplo básico de cómo se puede utilizar Spring Boot para crear una API REST. 🚀\n"
"\n"
"\n"
"\n"