"\n"
"\n"
"# **📌 Microservicios en Python: Guía completa con ejemplo práctico**  \n"
"\n"
"## **¿Qué son los microservicios?**  \n\n"
"Los **microservicios** son un enfoque arquitectónico para desarrollar aplicaciones como un conjunto de **servicios pequeños, independientes y comunicados entre sí**. Cada microservicio tiene una responsabilidad específica y funciona de manera autónoma.  \n"
"\n"
"🔹 **Características principales:**  \n\n"
"✅ **Independencia**: Cada servicio opera de forma autónoma.  \n\n"
"✅ **Escalabilidad**: Se pueden escalar individualmente.  \n\n"
"✅ **Despliegue independiente**: Cada servicio se puede actualizar sin afectar a otros.  \n\n"
"✅ **Comunicación entre servicios**: Generalmente mediante **APIs REST, gRPC o mensajería** (RabbitMQ, Kafka, Redis).  \n\n"
"✅ **Flexibilidad tecnológica**: Diferentes microservicios pueden usar distintos lenguajes o bases de datos.  \n"
"\n"
"## **📌 Microservicios en un entorno Python**  \n\n"
"Python es una excelente opción para microservicios debido a su **sencillez y ecosistema**. Las herramientas más utilizadas son:  \n"
"\n"
"🔹 **Frameworks web:**  \n\n"
"- [FastAPI](https://fastapi.tiangolo.com/) 🚀 (el más rápido)  \n\n"
"- [Flask](https://flask.palletsprojects.com/) 🏗️ (ligero y flexible)  \n\n"
"- [Django REST Framework (DRF)](https://www.django-rest-framework.org/) 🛠️ (ideal si usas Django)  \n"
"\n"
"🔹 **Comunicación entre microservicios:**  \n\n"
"- **HTTP REST APIs** (con FastAPI, Flask, DRF).  \n\n"
"- **Mensajería asíncrona** con **RabbitMQ, Kafka, Redis Pub/Sub**.  \n\n"
"- **gRPC** (alta velocidad en comunicación binaria).  \n"
"\n"
"🔹 **Gestión de microservicios:**  \n\n"
"- **Docker** (para contenerización).  \n\n"
"- **Kubernetes** (para orquestación de servicios).  \n\n"
"- **Consul o etcd** (para descubrimiento de servicios).  \n"
"\n"
"## **📌 Ejemplo práctico de microservicio con Python y FastAPI**  \n\n"
"### 🏗 **Caso de uso:**  \n\n"
"Construiremos un **sistema de pedidos** con dos microservicios:  \n\n"
"1️⃣ **Microservicio de Usuarios** (`users_service.py`)  \n\n"
"2️⃣ **Microservicio de Pedidos** (`orders_service.py`)  \n"
"\n"
"Los servicios se comunicarán entre sí mediante **HTTP REST APIs**.\n"
"\n"
"### **1️⃣ Microservicio de Usuarios (`users_service.py`)**\n\n"
"Este servicio gestiona usuarios y expone un endpoint para obtener información de un usuario.  \n"
"\n"
"```\n\n"
"from fastapi import FastAPI\n"
"\n"
"app = FastAPI()\n"
"\n"
"# Base de datos simulada\n\n"
"users_db = {\n\n"
"    1: {'id': 1, 'nombre': 'Alice'},\n\n"
"    2: {'id': 2, 'nombre': 'Bob'}\n\n"
"}\n"
"\n"
"@app.get('/usuarios/{user_id}')\n\n"
"def obtener_usuario(user_id: int):\n\n"
"    usuario = users_db.get(user_id)\n\n"
"    if usuario:\n\n"
"        return usuario\n\n"
"    return {'error': 'Usuario no encontrado'}, 404\n"
"\n"
"# Ejecutar con: uvicorn users_service:app --reload --port 8001\n"
"```\n\n"
"📌 **Explicación:**  \n\n"
"✔️ **Usamos FastAPI** para exponer un endpoint `/usuarios/{user_id}`.  \n\n"
"✔️ **Simulamos una base de datos** en `users_db`.  \n\n"
"✔️ Si el usuario existe, lo devolvemos en JSON.  \n"
"\n"
"### **2️⃣ Microservicio de Pedidos (`orders_service.py`)**\n\n"
"Este servicio gestiona pedidos y consulta el **microservicio de usuarios** para obtener información de los clientes.\n"
"\n"
"```\n\n"
"from fastapi import FastAPI\n\n"
"import requests  # Para comunicarnos con el otro microservicio\n"
"\n"
"app = FastAPI()\n"
"\n"
"# Base de datos simulada de pedidos\n\n"
"orders_db = {\n\n"
"    1: {'id': 1, 'user_id': 1, 'producto': 'Laptop'},\n\n"
"    2: {'id': 2, 'user_id': 2, 'producto': 'Teléfono'}\n\n"
"}\n"
"\n"
"USER_SERVICE_URL = 'http://127.0.0.1:8001/usuarios'  # URL del microservicio de usuarios\n"
"\n"
"@app.get('/pedidos/{order_id}')\n\n"
"def obtener_pedido(order_id: int):\n\n"
"    pedido = orders_db.get(order_id)\n\n"
"    if not pedido:\n\n"
"        return {'error': 'Pedido no encontrado'}, 404\n"
"\n"
"    # Llamamos al microservicio de usuarios\n\n"
"    user_response = requests.get(f'{USER_SERVICE_URL}/{pedido['user_id']}')\n"
"    \n"
"    if user_response.status_code == 200:\n\n"
"        pedido['cliente'] = user_response.json()\n\n"
"    else:\n\n"
"        pedido['cliente'] = {'error': 'Usuario no encontrado'}\n"
"\n"
"    return pedido\n"
"\n"
"# Ejecutar con: uvicorn orders_service:app --reload --port 8002\n"
"```\n\n"
"📌 **Explicación:**  \n\n"
"✔️ Exponemos un endpoint `/pedidos/{order_id}` para consultar pedidos.  \n\n"
"✔️ Buscamos en `orders_db` el pedido solicitado.  \n\n"
"✔️ Llamamos al **microservicio de usuarios** (`users_service`) con `requests.get()`.  \n\n"
"✔️ Si el usuario existe, lo agregamos a la respuesta del pedido.  \n"
"\n"
"## **📌 Probando los microservicios**\n\n"
"### **1️⃣ Iniciar ambos microservicios en terminales separadas**\n"
"```\n\n"
"uvicorn users_service:app --reload --port 8001\n"
"```\n"
"```\n\n"
"uvicorn orders_service:app --reload --port 8002\n"
"```\n"
"\n"
"### **2️⃣ Probar el servicio de Usuarios**\n"
"```\n\n"
"curl http://127.0.0.1:8001/usuarios/1\n"
"```\n\n"
"**Respuesta esperada:**\n"
"```\n\n"
"{'id': 1, 'nombre': 'Alice'}\n"
"```\n"
"\n"
"### **3️⃣ Probar el servicio de Pedidos**\n"
"```\n\n"
"curl http://127.0.0.1:8002/pedidos/1\n"
"```\n\n"
"**Respuesta esperada:**\n"
"```\n\n"
"{\n\n"
"    'id': 1,\n\n"
"    'user_id': 1,\n\n"
"    'producto': 'Laptop',\n\n"
"    'cliente': {\n\n"
"        'id': 1,\n\n"
"        'nombre': 'Alice'\n\n"
"    }\n\n"
"}\n"
"```\n\n"
"📌 **¡Éxito!** El servicio de pedidos obtiene información del usuario llamando al otro microservicio.  \n"
"\n"
"## **📌 Ventajas y Desventajas de Microservicios**\n\n"
"🔹 **Ventajas:**  \n\n"
"✅ Escalabilidad independiente de cada servicio.  \n\n"
"✅ Despliegue modular y flexible.  \n\n"
"✅ Menor acoplamiento (cada servicio se puede desarrollar y mantener por separado).  \n"
"\n"
"🔹 **Desventajas:**  \n\n"
"❌ Mayor complejidad en la comunicación entre servicios.  \n\n"
"❌ Necesidad de gestionar la orquestación con herramientas como **Kubernetes**.  \n\n"
"❌ Requiere **observabilidad** con herramientas como **Prometheus y Grafana** para monitoreo.  \n"
"\n"
"## **📌 Herramientas para Microservicios en Python**\n\n"
"✔️ **FastAPI / Flask / Django REST Framework** → Para construir APIs.  \n\n"
"✔️ **Docker & Kubernetes** → Para contenerización y despliegue.  \n\n"
"✔️ **RabbitMQ / Kafka / Redis** → Para comunicación asíncrona entre servicios.  \n\n"
"✔️ **PostgreSQL / MongoDB / Redis** → Bases de datos para almacenamiento.  \n\n"
"✔️ **Celery** → Para tareas en segundo plano.  \n"
"\n"
"## **🎯 Conclusión**\n\n"
"🚀 **Los microservicios permiten crear aplicaciones escalables y modulares.**  \n\n"
"🔥 Python, junto con **FastAPI**, Docker y Kubernetes, es ideal para implementarlos.  \n\n"
"🔗 ¡Ahora tienes la base para diseñar tus propios microservicios en Python! 🚀\n"
"\n"
"\n"