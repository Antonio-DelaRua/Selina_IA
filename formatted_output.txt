"\n"
"\n"
"## 🚀 **¿Qué es uWSGI?**  \n"
"**uWSGI** es un servidor de aplicaciones **WSGI** que permite ejecutar aplicaciones Python (Flask, Django, FastAPI) en producción.  \n"
"\n"
"🔹 **¿Por qué usar uWSGI?**  \n"
"✅ Es **rápido y eficiente**, con soporte para múltiples workers y threads.  \n"
"✅ Compatible con **Nginx y Apache** como proxy reverso.  \n"
"✅ Soporta múltiples protocolos (WSGI, HTTP, FastCGI, uWSGI, etc.).  \n"
"✅ Más configurable que Gunicorn, pero más complejo de usar.  \n"
"\n"
"🔹 **Alternativas:**  \n"
"- **Gunicorn** (más simple y usado con Flask/Django).  \n"
"- **Daphne** (para Django con WebSockets).  \n"
"- **Uvicorn** (para FastAPI con ASGI).  \n"
"\n"
"## 🛠️ **Ejemplo: Ejecutar Flask con uWSGI**  \n"
"\n"
"📌 **1️⃣ Instalar uWSGI y Flask**  \n"
"```\n"
"pip install flask uwsgi\n"
"```\n"
"\n"
"📌 **2️⃣ Crear la API en Flask**  \n"
"📄 **`app.py`**  \n"
"\n"
"```\n"
"from flask import Flask\n"
"\n"
"app = Flask(__name__)\n"
"\n"
"@app.route("/")\n"
"def home():\n"
"    return '¡Hola desde Flask con uWSGI!'\n"
"\n"
"if __name__ == "__main__":\n"
"    app.run()\n"
"```\n"
"\n"
"📌 **3️⃣ Ejecutar con uWSGI**  \n"
"```\n"
"uwsgi --http :8000 --wsgi-file app.py --callable app --processes 4 --threads 2\n"
"```\n"
"🔹 `--http :8000` → Escucha en el puerto `8000`.  \n"
"🔹 `--wsgi-file app.py` → Usa el archivo `app.py`.  \n"
"🔹 `--callable app` → La aplicación se llama `app`.  \n"
"🔹 `--processes 4` → Usa **4 procesos workers**.  \n"
"🔹 `--threads 2` → Cada proceso usa **2 threads**.  \n"
"\n"
"📌 **4️⃣ Acceder a la API**  \n"
"Abre en el navegador:  \n"
"```\n"
"http://localhost:8000/\n"
"```\n"
"\n"
"## 🔥 **uWSGI + Nginx (Producción)**  \n"
"En producción, se usa **Nginx** como proxy reverso para manejar peticiones y mejorar rendimiento.  \n"
"\n"
"📄 **Configurar Nginx (`/etc/nginx/sites-available/default`)**  \n"
"```\n"
"server {\n"
"    listen 80;\n"
"\n"
"    location / {\n"
"        include uwsgi_params;\n"
"        uwsgi_pass 127.0.0.1:8000;\n"
"    }\n"
"}\n"
"```\n"
"\n"
"📌 **Ejecutar uWSGI con socket Unix**  \n"
"```\n"
"uwsgi --socket /tmp/uwsgi.sock --wsgi-file app.py --callable app --processes 4 --threads 2 --chmod-socket=666\n"
"```\n"
"\n"
"📌 **Reiniciar Nginx**  \n"
"```\n"
"sudo systemctl restart nginx\n"
"```\n"
"\n"
"Ahora, Nginx manejará las peticiones y las enviará a uWSGI.\n"
"\n"
"## 🎯 **¿Cuándo usar uWSGI?**  \n"
"✅ Cuando necesitas **alto rendimiento** y personalización.  \n"
"✅ Para ejecutar **Flask o Django en producción con Nginx**.  \n"
"✅ Cuando necesitas compatibilidad con **FastCGI, HTTP y WSGI**.  \n"
"\n"
"🚀 **Ejemplo real:**  \n"
"Un **API REST en Flask** usa **uWSGI + Nginx** para manejar **miles de usuarios** con múltiples procesos y threads.  \n"
"\n"
"\n"
"\n"
"\n"