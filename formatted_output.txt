"\n"
"\n"
"¬°Vamos con otro cl√°sico de pruebas t√©cnicas! Este ejercicio pone a prueba el manejo de estructuras de datos y l√≥gica algor√≠tmica.  \n"
"\n"
"### **Ejercicio: Anagramas**  \n"
"\n"
"Dadas dos cadenas de texto, escribe una funci√≥n en Python que determine si son **anagramas**.  \n"
"\n"
"#### **Requisitos:**  \n\n"
"1. Dos palabras son **anagramas** si tienen las mismas letras en distinta posici√≥n.  \n\n"
"2. La comparaci√≥n **no debe ser sensible a may√∫sculas/min√∫sculas**.  \n\n"
"3. Ignorar los espacios y caracteres especiales.  \n\n"
"4. La soluci√≥n debe ser **eficiente (O(n))**.  \n"
"\n"
"**Ejemplo de entrada:**  \n"
"```\n\n"
"cadena1 = 'Listen'\n\n"
"cadena2 = 'Silent'\n"
"```\n\n"
"**Salida esperada:**  \n"
"```\n\n"
"Son anagramas: True\n"
"```\n"
"\n"
"Otro ejemplo:  \n"
"```\n\n"
"cadena1 = 'Hello'\n\n"
"cadena2 = 'Olelh'\n"
"```\n\n"
"**Salida esperada:**  \n"
"```\n\n"
"Son anagramas: True\n"
"```\n"
"\n"
"### **Soluci√≥n (O(n))**  \n"
"\n"
"```\n\n"
"from collections import Counter\n\n"
"import re\n"
"\n"
"def son_anagramas(cadena1, cadena2):\n\n"
"    # Normalizar: convertir a min√∫sculas y eliminar caracteres que no sean letras\n\n"
"    cadena1 = re.sub(r"[^a-z]", "", cadena1.lower())\n\n"
"    cadena2 = re.sub(r"[^a-z]", "", cadena2.lower())\n"
"\n"
"    # Comparar las frecuencias de letras usando Counter\n\n"
"    return Counter(cadena1) == Counter(cadena2)\n"
"\n"
"# Ejemplo de uso\n\n"
"cadena1 = 'Listen'\n\n"
"cadena2 = 'Silent'\n\n"
"print(f'Son anagramas: {son_anagramas(cadena1, cadena2)}')\n"
"```\n"
"\n"
"### **Explicaci√≥n:**  \n\n"
"1. **Normalizaci√≥n de cadenas:**  \n\n"
"   - Convertimos a min√∫sculas (`lower()`).  \n\n"
"   - Eliminamos espacios y caracteres especiales usando `re.sub(r"[^a-z]", "", texto)`.  \n\n"
"2. **Comparaci√≥n eficiente con `Counter` de `collections`**:  \n\n"
"   - Cuenta la frecuencia de cada letra en ambas cadenas.  \n\n"
"   - Si los `Counter` son iguales, las palabras son anagramas.  \n"
"\n"
"### **Eficiencia:**  \n\n"
"‚úÖ **Tiempo O(n)** (un solo recorrido para limpiar y otro para contar letras).  \n\n"
"‚úÖ **Espacio O(1)** (uso m√≠nimo de memoria adicional).  \n"
"\n"
"Este ejercicio es muy com√∫n en pruebas t√©cnicas para evaluar **manejo de cadenas, estructuras de datos y optimizaci√≥n**.  \n"
"\n"
"üî• ¬øTe gustar√≠a un nivel m√°s dif√≠cil, como encontrar **todos los anagramas posibles en una lista de palabras**? üöÄ\n"
"\n"
"\n"