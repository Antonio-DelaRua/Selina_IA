from model import PythonDB

def add_or_update_predefined_prompt(prompt, response):
    try:
        # Verificar si el prompt ya existe
        existing_entry = PythonDB.get_by_prompt(prompt)
        if existing_entry:
            # Si el prompt existe, actualizar la respuesta
            existing_entry.response = response
            existing_entry.save()
            print(f"Prompt existente actualizado: {prompt} -> {response}")
        else:
            # Si el prompt no existe, crear una nueva entrada
            new_entry = PythonDB(prompt=prompt, response=response)
            new_entry.save()
            print(f"Nuevo prompt predefinido agregado: {prompt} -> {response}")
    except Exception as e:
        print(f"Error al agregar o actualizar el prompt predefinido: {e}")

if __name__ == "__main__":
    # Ejemplo de uso
    prompt = "¿Qué es una base de datos?"
    response = "Una base de datos es una colección organizada de datos, generalmente almacenados y accesibles electrónicamente desde un sistema informático."

    add_or_update_predefined_prompt(prompt, response)
    
    # Agregar más prompts predefinidos según sea necesario
    prompts_responses = [
            (
        "que es python y para que se utiliza?",
        "Python es un lenguaje de programación de alto nivel, interpretado y de propósito general. "
        "Es conocido por su sintaxis sencilla y legible, lo que facilita su aprendizaje y uso.\n\n"
        "¿Para qué se utiliza Python?\n"
        "Python es muy versátil y se usa en diversos campos, como:\n\n"
        "- **Desarrollo web**: Con frameworks como Django y Flask.\n"
        "- **Ciencia de datos y Machine Learning**: Con bibliotecas como NumPy, Pandas, TensorFlow y Scikit-learn.\n"
        "- **Automatización y scripting**: Para escribir scripts que automatizan tareas repetitivas.\n"
        "- **Ciberseguridad**: Para análisis forense y pruebas de penetración.\n"
        "- **Desarrollo de videojuegos**: Con motores como Pygame.\n"
        "- **Administración de sistemas**: Para gestionar servidores y redes.\n"
        "- **Aplicaciones de escritorio**: Usando Tkinter o PyQt.\n"
        "- **Internet de las Cosas (IoT)**: Para programar dispositivos inteligentes."
    ),

            (
        "como instalar python en windows?",
        "Para instalar Python en Windows, sigue estos pasos:\n\n"
        "**Descarga Python**\n"
        "- Ve al sitio web oficial de Python: https://www.python.org/downloads/ \n\n"
        "**Instala Python**\n"
        "- Abre el archivo descargado (python-xxx.exe).\n"
        "- IMPORTANTE: Marca la casilla 'Add Python to PATH' (Agregar Python al PATH).\n"
        "- Haz clic en 'Install Now' y espera a que termine la instalación.\n\n"
        "**Verifica la instalación**\n"
        "- Presiona Win + R, escribe cmd y presiona Enter.\n"
        "```\npython --version\n"
        "or python -V\n```\n\n"
        "**(OPCIONAL) Instalar pip y probarlo**\n"
        "```\npip --version\n```\n"
        "```\npip install numpy pandas\n```"
    ),

            (
        "fundamentos de python",
        "**Sintaxis y Semántica Básica:**\n\n"
        "- **Tipos de datos básicos:** [int]  |  [float]  | [str]  |  [bool] \n\n"
        "- **Operadores:** [aritméticos]  |  [comparativos]  |  [lógicos]\n\n"
        "- **Estructuras de control:** [if]  |  [for]  |  [while]\n"
    ),

 (
        "tipos de datos basicos",
        "Python es un lenguaje de programación de alto nivel, interpretado y de tipado dinámico.\n"
        "Esto significa que no necesitas declarar el tipo de una variable antes de usarla. A continuación,\n"
        "se describen los tipos de datos básicos más importantes en Python:\n\n"
        "**- Tipos de Datos Numéricos **\n\n"
        "**Enteros (int):**\n"
        "```\na = 5\nb = -3\nc = 0\n```\n"
        "**Números de Punto Flotante (float): **\n"
        "```\nx = 3.14\ny = -0.5\nz = 2.0\n```\n"
        "**Números Complejos (complex):**\n"
        "```\nnum1 = 2 + 3j\nnum2 = -1j\nnum3 = 3.5 + 0j\n```\n"
        "**- Cadenas de Texto (str) **\n"
        "Las cadenas de texto son secuencias de caracteres encerradas entre comillas simples (')\n"
        "o dobles comillas. Las cadenas son inmutables, lo que significa que no se pueden cambiar una vez creadas.\n"
        "```\nsaludo = \"Hola, mundo!\"\nnombre = 'Antonio'\n```\n"
        "**Booleanos (bool) **\n"
        "Los valores booleanos representan verdad (True) o falsedad (False). Son muy útiles\n"
        "en estructuras de control y comparaciones.\n"
        "```\nes_mayor = True\nes_menor = False\n```\n"
        "**Tipos de Datos de Secuencia **\n\n"
        "**Listas (list): **\n"
        "Son colecciones ordenadas y mutables de elementos, que pueden ser de diferentes tipos.\n"
        "```\nnumeros = [1, 2, 3, 4, 5]\nmezcla = [1, 'dos', 3.0, True]\n```\n"
        "**Tuplas (tuple): **\n"
        "Son colecciones ordenadas e inmutables de elementos. Al ser inmutables, son más rápidas y seguras.\n"
        "```\ncoordenadas = (10, 20)\ndatos = ('Antonio', 30, 'España')\n```\n"
        "**Conjuntos (set): **\n"
        "Son colecciones desordenadas de elementos únicos. Son útiles para operaciones\n"
        "de conjunto como uniones e intersecciones.\n"
        "```\nfrutas = {\"manzana\", \"naranja\", \"plátano\"}\n```\n"
        "**Diccionarios (dict): **\n"
        "Son colecciones desordenadas de pares clave-valor. Permiten un acceso rápido a los valores asociados a una clave.\n"
        "```\npersona = {\"nombre\": \"Antonio\", \"edad\": 30, \"ciudad\": \"Madrid\"}\n```\n\n"
        "**Ejemplos de Uso**\n"
        "**Enteros:** \n"
        "a = 10\n"
        "b = -5\n\n"
        "**Flotantes:**\n"
        "pi = 3.14159\n"
        "gravedad = 9.8\n\n"
        "**Complejos:** \n"
        "c = 1 + 2j\n\n"
        "**Cadenas de texto:**\n"
        'saludo = "¡Hola, mundo!"\n'
        "nombre = 'Antonio'\n\n"
        "**Booleanos:**\n"
        "es_adulto = True\n"
        "es_estudiante = False\n\n"
        "**Listas:** \n"
        "numeros = [1, 2, 3, 4, 5]\n"
        "mixtos = [1, \"dos\", 3.0, True]\n\n"
        "**Tuplas:** \n"
        "punto = (10, 20)\n"
        "informacion = (\"Antonio\", 30, \"España\")\n\n"
        "**Conjuntos:**\n"
        "colores = {\"rojo\", \"verde\", \"azul\"}\n\n"
        "**Diccionarios:** \n"
        "coche = {\"marca\": \"Toyota\", \"modelo\": \"Corolla\", \"año\": 2021}\n\n"
        "**Operaciones Básicas**\n\n"
        "**Operaciones Aritméticas:** Suma, resta, multiplicación, división, módulo, y exponenciación.\n"
        "```\nsuma = 10 + 5\nresta = 10 - 5\nmultiplicacion = 10 * 5\ndivision = 10 / 5\nmodulo = 10 % 3\nexponente = 2 ** 3\n```\n"
        "**Operaciones con Listas: **Acceso, modificación, adición y eliminación de elementos.\n"
        "```\ndiccionario = {\"nombre\": \"Antonio\", \"edad\": 30}\ndiccionario[\"edad\"] = 31\ndiccionario[\"ciudad\"] = \"Madrid\"\ndel diccionario[\"edad\"]\n```\n"
    ),
            (
        "enteros",
        "**Ejemplos de enteros (int) en Python**\n\n"
        "**Asignación básica:**\n"
        "```python\n"
        "# Números positivos\n"
        "edad = 25\n"
        "cantidad_productos = 1000\n"
        "año_actual = 2024\n\n"
        "# Números negativos\n"
        "temperatura_bajo_cero = -15\n"
        "deuda = -5000\n\n"
        "# Cero\n"
        "puntos_iniciales = 0\n"
        "```"
        "**Operaciones aritméticas:**\n"
        "```python\n"
        "# Suma\n"
        "resultado_suma = 15 + 10  # 25\n\n"
        "# Resta\n"
        "resultado_resta = 50 - 30  # 20\n\n"
        "# Multiplicación\n"
        "resultado_mult = 7 * 3  # 21\n\n"
        "# División entera (//)\n"
        "resultado_div_entera = 20 // 6  # 3 (descarta decimales)\n\n"
        "# Módulo (%)\n"
        "residuo = 20 % 6  # 2 (resto de la división)\n\n"
        "# Potencia (**)\n"
        "cubo = 3 ** 3  # 27\n\n"
        "```\n"
        "**Uso en contexto real:**\n"
        "```python\n"
        "# Calcular días vividos (aproximado)\n"
        "años = 30\n"
        "días_por_año = 365\n"
        "días_vividos = años * días_por_año  # 10,950\n\n"
        "# Controlar inventario"
        "stock_inicial = 150\n"
        "ventas = 47\n"
        "reposición = 60\n"
        "stock_actual = stock_inicial - ventas + reposición  # 163\n\n"
        "# Conversión de unidades\n"
        "kilómetros = 5\n"
        "metros = kilómetros * 1000  # 5000\n\n"
        "```\n"
        "**Conversión a entero:**\n"
        "```python\n"
        "# Desde string numérico\n"
        'numero_str = "45"\n'
        "numero_int = int(numero_str)  # 45 (ahora es tipo int)\n\n"
        "# Desde float"
        "numero_float = 12.99\n"
        "numero_int = int(numero_float)  # 12 (trunca decimales)\n\n"
        '# Error común (evitar) --> # int("Hola") → ValueError\n'
        "```\n"
        "**Casos especiales:**\n"
        "```python\n"
        "# Notación científica (se almacena como int si no hay decimales)\n"
        "gran_numero = 2e3  # 2000 (tipo int)\n\n"
        "# Sistemas numéricos\n"
        "hexadecimal = 0xFF  # 255 en decimal\n"
        "binario = 0b1010  # 10 en decimal\n"
        "octal = 0o77  # 63 en decimal\n"
        "```\n"
),
            (
        "int",
        "**Ejemplos de enteros (int) en Python**\n\n"
        "**Asignación básica:**\n"
        "```python\n"
        "# Números positivos\n"
        "edad = 25\n"
        "cantidad_productos = 1000\n"
        "año_actual = 2024\n\n"
        "# Números negativos\n"
        "temperatura_bajo_cero = -15\n"
        "deuda = -5000\n\n"
        "# Cero\n"
        "puntos_iniciales = 0\n"
        "```"
        "**Operaciones aritméticas:**\n"
        "```python\n"
        "# Suma\n"
        "resultado_suma = 15 + 10  # 25\n\n"
        "# Resta\n"
        "resultado_resta = 50 - 30  # 20\n\n"
        "# Multiplicación\n"
        "resultado_mult = 7 * 3  # 21\n\n"
        "# División entera (//)\n"
        "resultado_div_entera = 20 // 6  # 3 (descarta decimales)\n\n"
        "# Módulo (%)\n"
        "residuo = 20 % 6  # 2 (resto de la división)\n\n"
        "# Potencia (**)\n"
        "cubo = 3 ** 3  # 27\n\n"
        "```\n"
        "**Uso en contexto real:**\n"
        "```python\n"
        "# Calcular días vividos (aproximado)\n"
        "años = 30\n"
        "días_por_año = 365\n"
        "días_vividos = años * días_por_año  # 10,950\n\n"
        "# Controlar inventario"
        "stock_inicial = 150\n"
        "ventas = 47\n"
        "reposición = 60\n"
        "stock_actual = stock_inicial - ventas + reposición  # 163\n\n"
        "# Conversión de unidades\n"
        "kilómetros = 5\n"
        "metros = kilómetros * 1000  # 5000\n\n"
        "```\n"
        "**Conversión a entero:**\n"
        "```python\n"
        "# Desde string numérico\n"
        'numero_str = "45"\n'
        "numero_int = int(numero_str)  # 45 (ahora es tipo int)\n\n"
        "# Desde float"
        "numero_float = 12.99\n"
        "numero_int = int(numero_float)  # 12 (trunca decimales)\n\n"
        '# Error común (evitar) --> # int("Hola") → ValueError\n'
        "```\n"
        "**Casos especiales:**\n"
        "```python\n"
        "# Notación científica (se almacena como int si no hay decimales)\n"
        "gran_numero = 2e3  # 2000 (tipo int)\n\n"
        "# Sistemas numéricos\n"
        "hexadecimal = 0xFF  # 255 en decimal\n"
        "binario = 0b1010  # 10 en decimal\n"
        "octal = 0o77  # 63 en decimal\n"
        "```\n"
),

            (
        "float",
        "**¿Qué es un float en Python?**\n\n"
        "Los float son números de punto flotante (decimales) que permiten representar valores reales con parte fraccionaria.\n\n"
        "**Ejemplo de uso práctico**\n"
        "```python\n"
        "# 1. Asignación básica\n"
        "temperatura = 23.5\n"       
        "pi = 3.1415926535\n"
        "presupuesto = 1500.75\n\n"
        "# 2. Notación científica\n"
        "velocidad_luz = 3e8      # 300000000.0\n"
        "micro_metro = 1e-6       # 0.000001\n\n"
        "# 3. Operaciones matemáticas\n"
        "radio = 5.0\n"
        "area_circulo = pi * (radio ** 2)  # 78.5398163375\n\n"
        "# 4. Conversiones\n"
        "entero_a_float = float(42)        # 42.0\n"
        'texto_a_float = float("15.75")    # 15.75\n\n'
        "# 5. Resultados de división\n"
        "division = 10 / 3  # 3.3333333333333335 (automáticamente float)\n\n"
        "**Casos especiales**\n"
        "infinito_positivo = float('inf')   # Representa infinito\n"
        "infinito_negativo = -float('inf')  # -infinito\n"
        "no_es_numero = float('nan')        # NaN (Not a Number)\n\n"
        "```\n"
        "**¿Cuándo usar floats?**\n"
        "- Cálculos científicos/ingeniería\n"
        "- Manejo de dinero (aunque mejor usar decimal para precisión absoluta)\n"
        "- Mediciones físicas (peso, temperatura, tiempo)\n"
        "- Gráficos y modelado 3D"
),

            (
        "numeros complejos",
        "**¿Qué es un complex en Python?**\n\n"
        "Los números complejos tienen una parte real y una parte imaginaria (múltiplo de j, la unidad imaginaria).\n\n"
        "**Ejemplo de uso práctico**\n"
        "```python\n"
        "# 1. Asignación directa\n"
        "z1 = 3 + 4j        # Parte real: 3 | Parte imaginaria: 4\n"       
        "z2 = -2.5 - 1.7j   # Números negativos\n"
        "z3 = 0j            # Complejo puramente imaginario (real=0)\n\n"
        "# 2. Usando complex()\n"
        "z4 = complex(2, 5)   # 2 + 5j\n"
        "z5 = complex(1.5)    # 1.5 + 0j (si solo se especifica real)\n\n"
        "```\n"
        "**Operaciones comunes**\n"
        "```python\n"
        "# Suma\n"
        "resultado_suma = (2 + 3j) + (1 - 2j)  # 3 + 1j\n\n"
        "# Multiplicación\n"
        "resultado_mult = (1 + 2j) * (3 - 4j)  # 11 + 2j (3 + 6j -4j -8j² → j²=-1)\n\n"
        '# Conjugado complejo\n'
        "conjugado = (5 - 3j).conjugate()  # 5 + 3j\n\n"
        "# Acceso a partes\n"
        "real = z1.real     # 3.0 (siempre retorna float)\n"
        "imag = z1.imag     # 4.0\n"
        "```\n"

        "**Casos especiales**\n"
        "```python\n"
        "# Desde strings\n"
        'z6 = complex("5+3j")      # 5 + 3j (sin espacios)\n'
        'z7 = complex("2.7")       # 2.7 + 0j\n\n'
        "# Magnitud y fase (módulo y argumento)\n"
        "import cmath\n"
        "modulo = abs(3 + 4j)      # 5.0 (√(3² +4²))\n"
        "fase = cmath.phase(1 + 1j) # 0.785 rad (45°)\n\n"
        "```\n"
        "**Aplicaciones prácticas**\n"
        "```python\n"
        "# 1. Resolver ecuaciones cuadráticas con raíces complejas\n"
        'a, b, c = 1, 2, 5\n'
        "discriminante = b**2 - 4*a*c\n"
        "raiz1 = (-b + cmath.sqrt(discriminante)) / (2*a)  # -1 + 2j\n"
        "raiz2 = (-b - cmath.sqrt(discriminante)) / (2*a)  # -1 - 2j\n\n"
        "# 2. Ingeniería eléctrica (impedancia)\n"
        "resistencia = 4.7  # Ohms (real)\n"
        "reactancia = 3.2j  # Ohms (imaginario)\n"
        "impedancia_total = resistencia + reactancia  # 4.7 + 3.2j\n\n"
        "# 3. Transformadas de Fourier (procesamiento de señales)\n"
        "muestra = [0.5 + 0j, 1j, -0.3 + 0.4j]  # Datos complejos típicos\n\n"
        "```\n"
        "**Precauciones importantes**\n"
        "```python\n"
        "# 1. La 'j' debe ir pegado al número imaginario\n"
        'incorrecto = 3 + j4     # Error (NameError: j4 no existe)\n'
        "correcto = 3 + 4j       # ✓\n\n"
        "# 2. Precisión en representación\n"
        "operacion = (0.1 + 0.2j) * 3  # 0.3 + 0.6j (precisión float)\n\n"
        "```\n"
        "**¿Cuándo usar complex?**\n"
        "- Análisis de circuitos AC\n"
        "- Procesamiento de señales digitales\n"
        "- Mecánica cuántica (funciones de onda)\n"
        "- Gráficos fractales (como el conjunto de Mandelbrot)"
),
            (
        "complex",
        "**¿Qué es un complex en Python?**\n\n"
        "Los números complejos tienen una parte real y una parte imaginaria (múltiplo de j, la unidad imaginaria).\n\n"
        "**Ejemplo de uso práctico**\n"
        "```python\n"
        "# 1. Asignación directa\n"
        "z1 = 3 + 4j        # Parte real: 3 | Parte imaginaria: 4\n"       
        "z2 = -2.5 - 1.7j   # Números negativos\n"
        "z3 = 0j            # Complejo puramente imaginario (real=0)\n\n"
        "# 2. Usando complex()\n"
        "z4 = complex(2, 5)   # 2 + 5j\n"
        "z5 = complex(1.5)    # 1.5 + 0j (si solo se especifica real)\n\n"
        "```\n"
        "**Operaciones comunes**\n"
        "```python\n"
        "# Suma\n"
        "resultado_suma = (2 + 3j) + (1 - 2j)  # 3 + 1j\n\n"
        "# Multiplicación\n"
        "resultado_mult = (1 + 2j) * (3 - 4j)  # 11 + 2j (3 + 6j -4j -8j² → j²=-1)\n\n"
        '# Conjugado complejo\n'
        "conjugado = (5 - 3j).conjugate()  # 5 + 3j\n\n"
        "# Acceso a partes\n"
        "real = z1.real     # 3.0 (siempre retorna float)\n"
        "imag = z1.imag     # 4.0\n"
        "```\n"

        "**Casos especiales**\n"
        "```python\n"
        "# Desde strings\n"
        'z6 = complex("5+3j")      # 5 + 3j (sin espacios)\n'
        'z7 = complex("2.7")       # 2.7 + 0j\n\n'
        "# Magnitud y fase (módulo y argumento)\n"
        "import cmath\n"
        "modulo = abs(3 + 4j)      # 5.0 (√(3² +4²))\n"
        "fase = cmath.phase(1 + 1j) # 0.785 rad (45°)\n\n"
        "```\n"
        "**Aplicaciones prácticas**\n"
        "```python\n"
        "# 1. Resolver ecuaciones cuadráticas con raíces complejas\n"
        'a, b, c = 1, 2, 5\n'
        "discriminante = b**2 - 4*a*c\n"
        "raiz1 = (-b + cmath.sqrt(discriminante)) / (2*a)  # -1 + 2j\n"
        "raiz2 = (-b - cmath.sqrt(discriminante)) / (2*a)  # -1 - 2j\n\n"
        "# 2. Ingeniería eléctrica (impedancia)\n"
        "resistencia = 4.7  # Ohms (real)\n"
        "reactancia = 3.2j  # Ohms (imaginario)\n"
        "impedancia_total = resistencia + reactancia  # 4.7 + 3.2j\n\n"
        "# 3. Transformadas de Fourier (procesamiento de señales)\n"
        "muestra = [0.5 + 0j, 1j, -0.3 + 0.4j]  # Datos complejos típicos\n\n"
        "```\n"
        "**Precauciones importantes**\n"
        "```python\n"
        "# 1. La 'j' debe ir pegado al número imaginario\n"
        'incorrecto = 3 + j4     # Error (NameError: j4 no existe)\n'
        "correcto = 3 + 4j       # ✓\n\n"
        "# 2. Precisión en representación\n"
        "operacion = (0.1 + 0.2j) * 3  # 0.3 + 0.6j (precisión float)\n\n"
        "```\n"
        "**¿Cuándo usar complex?**\n"
        "- Análisis de circuitos AC\n"
        "- Procesamiento de señales digitales\n"
        "- Mecánica cuántica (funciones de onda)\n"
        "- Gráficos fractales (como el conjunto de Mandelbrot)"
),

            (
        "cadena de texto",
        "**¿Qué es una cadena de texto en Python?**\n\n"
        "Las cadenas son secuencias inmutables de caracteres (letras, números, símbolos) encerradas entre comillas.\n\n"
        "**Ejemplo de uso básico**\n"
        "```python\n"
        "# 1. Creación de cadenas\n"
        'saludo = "¡Hola, mundo!"\n'       
        "direccion = 'Calle Falsa 123'\n"
        "poema = '''Roses are red,\n"
        "Violets are blue...'''  # Multilínea\n\n"
        "# 2. Caracteres especiales con escape\n"
        'texto = "Texto con \"comillas\" y \\barra\\"  # Usa \ para escapar\n\n'
        "# 3. Acceso a caracteres\n"
        "primera_letra = saludo[0]  # '¡' (índice 0)\n"
        "ultimo_caracter = saludo[-1]  # '!')\n"
        "subcadena = saludo[1:5]  # 'Hola' (slicing)\n\n"
        "```\n"
        "**Operaciones comunes**\n"
        "```python\n"
        "# Concatenación\n"
        'nombre = "Ana"\n'
        'bienvenida = "Hola, " + nombre + "!"  # "Hola, Ana!"\n\n'
        "# Repetición\n"
        'eco = "ja" * 3  # "jajaja"\n\n'
        "# Formateo con f-strings (Python 3.6+)\n"
        "edad = 25\n"
        'mensaje = f"{nombre} tiene {edad} años"  # "Ana tiene 25 años"\n\n'
        "# Métodos útiles\n"
        'texto = "  Python es Genial  "\n'
        'limpio = texto.strip()  # "Python es Genial" (elimina espacios)\n'
        'mayusculas = texto.upper()  # "  PYTHON ES GENIAL  ")\n'
        'reemplazo = texto.replace("Genial", "Increíble")  # "  Python es Increíble  "\n\n'
        "```\n"
        "**Casos especiales**\n"
        "```python\n"
        "# Unicode y emojis\n"
        'emoji = "Python 🐍"  # Soporta caracteres Unicode\n'
        'hex_code = "\u00A1Hola!"  # ¡Hola! (código hexadecimal)\n\n'
        "# Conversiones\n"
        'numero_str = str(42)  # "42" (entero a cadena)\n'
        'lista = "-".join(["a", "b", "c"])  # "a-b-c" (unión con separador)\n\n'
        "# Comprobaciones\n"
        'es_alfanumerico = "abc123".isalnum()  # True\n'
        'es_digito = "50".isdigit()  # True\n\n'
        "```\n"
        "**Aplicaciones prácticas**\n"
        "```python\n"
        "# 1. Procesamiento de texto\n"
        'frase = "Python es un lenguaje poderoso"\n'
        'palabras = frase.split()  # ["Python", "es", ..., "poderoso"]\n'
        "longitud = len(frase)  # 28 caracteres (incluyendo espacios)\n\n"
        "# 2. Validación de entrada de usuario\n"
        'email = "usuario@dominio.com"\n'
        'if "@" in email and "." in email.split("@")[1]:\n'
        '              print("Email válido")\n\n'
        "# 3. Generación de HTML/XML\n"
        "etiqueta = f'<a href=`{url}`>{texto}</a>'  # Plantillas simples\n\n"
        "# 4. Palíndromos\n"
        'es_palindromo = "anilina" == "anilina"[::-1]  # True (reversa)\n\n'
        "```\n"
        "**Precauciones importantes**\n"
        "```python\n"
        "# 1. Inmutabilidad: No se pueden modificar caracteres individuales\n"
        'cadena = "Hola"\n'
        '# cadena[0] = "M"  # Error: TypeError\n\n'
        "# 2. Codificación de caracteres\n"
        'texto = "Añadir carácter ñ"  # Usar codificación UTF-8 al guardar archivos\n\n'
        "# 3. Performance en concatenaciones grandes\n"
        "# Mejor usar listas y str.join():\n"
        'resultado = "\n".join(partes)  # Eficiente para muchas operaciones\n\n'
        "```\n"
        "**¿Cuándo usar str?**\n"
        "- Manipulación de texto (limpieza, análisis)\n"
        "- Interfaz de usuario y mensajes\n"
        "- Procesamiento de archivos (CSV, JSON, XML)\n"
        "- Generación de contenido dinámico (plantillas web)\n"
        "- Expresiones regulares (búsqueda de patrones)"
),

            (
        "str",
        "**¿Qué es una cadena de texto en Python?**\n\n"
        "Las cadenas son secuencias inmutables de caracteres (letras, números, símbolos) encerradas entre comillas.\n\n"
        "**Ejemplo de uso básico**\n"
        "```python\n"
        "# 1. Creación de cadenas\n"
        'saludo = "¡Hola, mundo!"\n'       
        "direccion = 'Calle Falsa 123'\n"
        "poema = '''Roses are red,\n"
        "Violets are blue...'''  # Multilínea\n\n"
        "# 2. Caracteres especiales con escape\n"
        'texto = "Texto con \"comillas\" y \\barra\\"  # Usa \ para escapar\n\n'
        "# 3. Acceso a caracteres\n"
        "primera_letra = saludo[0]  # '¡' (índice 0)\n"
        "ultimo_caracter = saludo[-1]  # '!')\n"
        "subcadena = saludo[1:5]  # 'Hola' (slicing)\n\n"
        "```\n"
        "**Operaciones comunes**\n"
        "```python\n"
        "# Concatenación\n"
        'nombre = "Ana"\n'
        'bienvenida = "Hola, " + nombre + "!"  # "Hola, Ana!"\n\n'
        "# Repetición\n"
        'eco = "ja" * 3  # "jajaja"\n\n'
        "# Formateo con f-strings (Python 3.6+)\n"
        "edad = 25\n"
        'mensaje = f"{nombre} tiene {edad} años"  # "Ana tiene 25 años"\n\n'
        "# Métodos útiles\n"
        'texto = "  Python es Genial  "\n'
        'limpio = texto.strip()  # "Python es Genial" (elimina espacios)\n'
        'mayusculas = texto.upper()  # "  PYTHON ES GENIAL  ")\n'
        'reemplazo = texto.replace("Genial", "Increíble")  # "  Python es Increíble  "\n\n'
        "```\n"
        "**Casos especiales**\n"
        "```python\n"
        "# Unicode y emojis\n"
        'emoji = "Python 🐍"  # Soporta caracteres Unicode\n'
        'hex_code = "\u00A1Hola!"  # ¡Hola! (código hexadecimal)\n\n'
        "# Conversiones\n"
        'numero_str = str(42)  # "42" (entero a cadena)\n'
        'lista = "-".join(["a", "b", "c"])  # "a-b-c" (unión con separador)\n\n'
        "# Comprobaciones\n"
        'es_alfanumerico = "abc123".isalnum()  # True\n'
        'es_digito = "50".isdigit()  # True\n\n'
        "```\n"
        "**Aplicaciones prácticas**\n"
        "```python\n"
        "# 1. Procesamiento de texto\n"
        'frase = "Python es un lenguaje poderoso"\n'
        'palabras = frase.split()  # ["Python", "es", ..., "poderoso"]\n'
        "longitud = len(frase)  # 28 caracteres (incluyendo espacios)\n\n"
        "# 2. Validación de entrada de usuario\n"
        'email = "usuario@dominio.com"\n'
        'if "@" in email and "." in email.split("@")[1]:\n'
        '              print("Email válido")\n\n'
        "# 3. Generación de HTML/XML\n"
        "etiqueta = f'<a href=`{url}`>{texto}</a>'  # Plantillas simples\n\n"
        "# 4. Palíndromos\n"
        'es_palindromo = "anilina" == "anilina"[::-1]  # True (reversa)\n\n'
        "```\n"
        "**Precauciones importantes**\n"
        "```python\n"
        "# 1. Inmutabilidad: No se pueden modificar caracteres individuales\n"
        'cadena = "Hola"\n'
        '# cadena[0] = "M"  # Error: TypeError\n\n'
        "# 2. Codificación de caracteres\n"
        'texto = "Añadir carácter ñ"  # Usar codificación UTF-8 al guardar archivos\n\n'
        "# 3. Performance en concatenaciones grandes\n"
        "# Mejor usar listas y str.join():\n"
        'resultado = "\n".join(partes)  # Eficiente para muchas operaciones\n\n'
        "```\n"
        "**¿Cuándo usar str?**\n"
        "- Manipulación de texto (limpieza, análisis)\n"
        "- Interfaz de usuario y mensajes\n"
        "- Procesamiento de archivos (CSV, JSON, XML)\n"
        "- Generación de contenido dinámico (plantillas web)\n"
        "- Expresiones regulares (búsqueda de patrones)"
),

    (
        "boolean",
        "¿Qué es un boolean en Python?\n\n"
        "Los booleanos son un tipo de dato que solo puede tener dos valores: `True` o `False`. Son utilizados comúnmente en estructuras de control y comparaciones.\n\n"
        "Ejemplo de uso práctico\n"
        "```python\n"
        "# 1. Asignación directa\n"
        "es_verdadero = True      # Asignación de valor True\n"
        "es_falso = False         # Asignación de valor False\n"
        "\n"
        "# 2. Comparaciones\n"
        "igual = (2 == 2)         # True, porque 2 es igual a 2\n"
        "mayor = (5 > 3)          # True, porque 5 es mayor que 3\n"
        "menor = (1 < 0)          # False, porque 1 no es menor que 0\n"
        "```\n"
        "Operaciones comunes\n"
        "```python\n"
        "# Operadores lógicos\n"
        "resultado_and = True and False  # False (ambos deben ser True)\n"
        "resultado_or = True or False    # True (al menos uno debe ser True)\n"
        "resultado_not = not True        # False (negación)\n"
        "\n"
        "# Comparaciones\n"
        "igual = (10 == 10)    # True\n"
        "diferente = (10 != 5) # True\n"
        "mayor = (7 > 4)       # True\n"
        "menor = (3 < 8)       # True\n"
        "\n"
        "# Condiciones\n"
        "if es_verdadero:\n"
        "    print(\"Es verdadero\")\n"
        "else:\n"
        "    print(\"Es falso\")\n"
        "# Output: Es verdadero\n"
        "```\n"
        "Casos especiales\n"
        "```python\n"
        "# Valores que evalúan a False\n"
        "valor_falso = bool(0)       # False (enteros)\n"
        "valor_falso = bool(0.0)     # False (flotantes)\n"
        "valor_falso = bool('')      # False (cadenas vacías)\n"
        "valor_falso = bool([])      # False (listas vacías)\n"
        "valor_falso = bool({})      # False (diccionarios vacíos)\n"
        "valor_falso = bool(None)    # False (NoneType)\n"
        "\n"
        "# Valores que evalúan a True\n"
        "valor_verdadero = bool(1)       # True (entero no cero)\n"
        "valor_verdadero = bool(-1)      # True (entero no cero negativo)\n"
        "valor_verdadero = bool(0.1)     # True (flotante no cero)\n"
        "valor_verdadero = bool('Hola')  # True (cadena no vacía)\n"
        "valor_verdadero = bool([1, 2])  # True (lista no vacía)\n"
        "valor_verdadero = bool({'a': 1}) # True (diccionario no vacío)\n"
        "```\n"
        "Aplicaciones prácticas\n"
        "```python\n"
        "# 1. Control de flujo\n"
        "saldo = 100\n"
        "retirar = 50\n"
        "if saldo >= retirar:\n"
        "    saldo -= retirar\n"
        "    print(\"Retiro exitoso\")\n"
        "else:\n"
        "    print(\"Saldo insuficiente\")\n"
        "\n"
        "# 2. Validación de entradas\n"
        "usuario_activo = True\n"
        "if usuario_activo:\n"
        "    print(\"El usuario está activo\")\n"
        "else:\n"
        "    print(\"El usuario no está activo\")\n"
        "\n"
        "# 3. Búsquedas en listas\n"
        "numeros = [1, 2, 3, 4, 5]\n"
        "valor_buscado = 3\n"
        "encontrado = valor_buscado in numeros  # True\n"
        "```\n"
        "Precauciones importantes\n"
        "```python\n"
        "# 1. Comparaciones con 'is' y '=='\n"
        "a = [1, 2, 3]\n"
        "b = a\n"
        "c = [1, 2, 3]\n"
        "comparacion_is = (a is b)  # True (mismo objeto en memoria)\n"
        "comparacion_is = (a is c)  # False (diferentes objetos)\n"
        "comparacion_eq = (a == c)  # True (mismo contenido)\n"
        "\n"
        "# 2. Cuidado con las comparaciones flotantes\n"
        "valor = 0.1 + 0.2\n"
        "comparacion = (valor == 0.3)  # False (precisión flotante)\n"
        "print(valor)  # 0.30000000000000004\n"
        "```\n"
        "¿Cuándo usar boolean?\n"
        "- Estructuras de control (if, while, for)\n"
        "- Validaciones y verificaciones\n"
        "- Comparaciones y evaluaciones lógicas\n"
        "- Filtrado de datos\n"
        "- Control de flujo en algoritmos"
    ),
                 (
        "listas",
        "¿Qué es una lista en Python?\n\n"
        "Las listas son estructuras de datos mutables que pueden contener una colección ordenada de elementos de cualquier tipo.\n\n"
        "Ejemplo de uso práctico\n"
        "```python\n"
        "# 1. Creación de listas\n"
        "vacia = []  # Lista vacía\n"
        "numeros = [1, 2, 3, 4, 5]  # Lista de enteros\n"
        "mixta = [1, 'dos', 3.0, [4, 5]]  # Lista mixta\n"
        "\n"
        "# 2. Acceso a elementos\n"
        "primer_elemento = numeros[0]  # 1 (índice 0)\n"
        "ultimo_elemento = numeros[-1]  # 5 (último elemento)\n"
        "sublista = numeros[1:4]  # [2, 3, 4] (slicing)\n"
        "```\n"
        "Operaciones comunes\n"
        "```python\n"
        "# Adición de elementos\n"
        "numeros.append(6)  # [1, 2, 3, 4, 5, 6] (agrega al final)\n"
        "numeros.insert(0, 0)  # [0, 1, 2, 3, 4, 5, 6] (inserta en índice)\n"
        "\n"
        "# Eliminación de elementos\n"
        "numeros.pop()  # [0, 1, 2, 3, 4, 5] (elimina el último)\n"
        "numeros.remove(3)  # [0, 1, 2, 4, 5] (elimina el primer 3 encontrado)\n"
        "\n"
        "# Modificación de elementos\n"
        "numeros[0] = -1  # [-1, 1, 2, 4, 5] (modifica el primer elemento)\n"
        "\n"
        "# Operaciones de lista\n"
        "concatenacion = [1, 2] + [3, 4]  # [1, 2, 3, 4] (concatenación)\n"
        "repeticion = [0] * 3  # [0, 0, 0] (repetición)\n"
        "longitud = len(numeros)  # 5 (número de elementos)\n"
        "```\n"
        "Casos especiales\n"
        "```python\n"
        "# Listas anidadas\n"
        "anidada = [[1, 2, 3], [4, 5, 6]]\n"
        "elemento_anidado = anidada[0][1]  # 2 (acceso a elemento anidado)\n"
        "\n"
        "# Comprensiones de listas\n"
        "cuadrados = [x**2 for x in range(5)]  # [0, 1, 4, 9, 16]\n"
        "\n"
        "# Métodos útiles\n"
        "numeros.extend([6, 7])  # [-1, 1, 2, 4, 5, 6, 7] (extiende con otra lista)\n"
        "numeros.reverse()  # [7, 6, 5, 4, 2, 1, -1] (invierte el orden)\n"
        "numeros.sort()  # [-1, 1, 2, 4, 5, 6, 7] (ordena la lista)\n"
        "```\n"
        "Aplicaciones prácticas\n"
        "```python\n"
        "# 1. Iteración sobre listas\n"
        "for num in numeros:\n"
        "    print(num)\n"
        "\n"
        "# 2. Filtrado de listas\n"
        "pares = [x for x in numeros if x % 2 == 0]  # [2, 4, 6]\n"
        "\n"
        "# 3. Operaciones matemáticas\n"
        "suma = sum(numeros)  # 24 (suma de elementos)\n"
        "```\n"
        "Precauciones importantes\n"
        "```python\n"
        "# 1. Índices fuera de rango\n"
        "try:\n"
        "    elemento = numeros[10]  # Error: IndexError\n"
        "except IndexError:\n"
        "    print(\"Índice fuera de rango\")\n"
        "\n"
        "# 2. Modificación durante la iteración\n"
        "for num in numeros:\n"
        "    if num < 0:\n"
        "        numeros.remove(num)  # Puede causar problemas\n"
        "\n"
        "# 3. Copias de listas\n"
        "copia_numeros = numeros[:]  # Crea una copia superficial\n"
        "```\n"
        "¿Cuándo usar listas?\n"
        "- Almacenar colecciones ordenadas de elementos\n"
        "- Realizar operaciones de agregación, filtrado y selección\n"
        "- Implementar estructuras de datos más complejas\n"
        "- Trabajar con secuencias de datos mutables\n"
    ),
    (
        "tuplas",
        "¿Qué es una tupla en Python?\n\n"
        "Las tuplas son estructuras de datos inmutables que pueden contener una colección ordenada de elementos de cualquier tipo.\n\n"
        "Ejemplo de uso práctico\n"
        "```python\n"
        "# 1. Creación de tuplas\n"
        "vacía = ()  # Tupla vacía\n"
        "numeros = (1, 2, 3, 4, 5)  # Tupla de enteros\n"
        "mixta = (1, 'dos', 3.0, (4, 5))  # Tupla mixta\n"
        "\n"
        "# 2. Acceso a elementos\n"
        "primer_elemento = numeros[0]  # 1 (índice 0)\n"
        "ultimo_elemento = numeros[-1]  # 5 (último elemento)\n"
        "subtupla = numeros[1:4]  # (2, 3, 4) (slicing)\n"
        "```\n"
        "Operaciones comunes\n"
        "```python\n"
        "# Concatenación de tuplas\n"
        "concatenacion = (1, 2) + (3, 4)  # (1, 2, 3, 4)\n"
        "\n"
        "# Repetición de tuplas\n"
        "repeticion = (0,) * 3  # (0, 0, 0)\n"
        "\n"
        "# Longitud de la tupla\n"
        "longitud = len(numeros)  # 5 (número de elementos)\n"
        "\n"
        "# Desempaquetado de tuplas\n"
        "a, b, c = (1, 2, 3)  # a=1, b=2, c=3\n"
        "```\n"
        "Casos especiales\n"
        "```python\n"
        "# Tuplas anidadas\n"
        "anidada = ((1, 2, 3), (4, 5, 6))\n"
        "elemento_anidado = anidada[0][1]  # 2 (acceso a elemento anidado)\n"
        "\n"
        "# Tuplas de un solo elemento\n"
        "un_elemento = (1,)  # Necesita una coma\n"
        "\n"
        "# Métodos útiles\n"
        "indice = numeros.index(3)  # 2 (índice del primer 3 encontrado)\n"
        "conteo = numeros.count(1)  # 1 (número de veces que 1 aparece)\n"
        "```\n"
        "Aplicaciones prácticas\n"
        "```python\n"
        "# 1. Pares clave-valor\n"
        "diccionario = dict([(1, 'uno'), (2, 'dos')])  # {1: 'uno', 2: 'dos'}\n"
        "\n"
        "# 2. Funciones que retornan múltiples valores\n"
        "def coordenadas():\n"
        "    return (10, 20)\n"
        "x, y = coordenadas()  # x=10, y=20\n"
        "\n"
        "# 3. Iteración sobre tuplas\n"
        "for numero in numeros:\n"
        "    print(numero)\n"
        "```\n"
        "Precauciones importantes\n"
        "```python\n"
        "# 1. Inmutabilidad: No se pueden modificar elementos individuales\n"
        "try:\n"
        "    numeros[0] = 0  # Error: TypeError\n"
        "except TypeError:\n"
        "    print(\"Las tuplas son inmutables\")\n"
        "\n"
        "# 2. Índices fuera de rango\n"
        "try:\n"
        "    elemento = numeros[10]  # Error: IndexError\n"
        "except IndexError:\n"
        "    print(\"Índice fuera de rango\")\n"
        "\n"
        "# 3. Copias de tuplas\n"
        "copia_numeros = tuple(numeros)  # Crea una copia superficial\n"
        "```\n"
        "¿Cuándo usar tuplas?\n"
        "- Almacenar colecciones ordenadas de elementos inmutables\n"
        "- Retornar múltiples valores desde una función\n"
        "- Utilizar como claves en diccionarios (si los elementos son hashables)\n"
        "- Proteger datos de modificaciones accidentales\n"
    ),

    (
        "set",
        "¿Qué es un conjunto en Python?\n\n"
        "Los conjuntos son estructuras de datos que almacenan elementos únicos y desordenados. Son mutables, pero sus elementos deben ser inmutables.\n\n"
        "Ejemplo de uso práctico\n"
        "```python\n"
        "# 1. Creación de conjuntos\n"
        "vacio = set()  # Conjunto vacío\n"
        "numeros = {1, 2, 3, 4, 5}  # Conjunto de enteros\n"
        "mixto = {1, 'dos', 3.0}  # Conjunto mixto\n"
        "\n"
        "# 2. Adición de elementos\n"
        "numeros.add(6)  # {1, 2, 3, 4, 5, 6}\n"
        "\n"
        "# 3. Eliminación de elementos\n"
        "numeros.remove(3)  # {1, 2, 4, 5, 6}\n"
        "numeros.discard(10)  # No causa error si el elemento no está presente\n"
        "\n"
        "# 4. Verificación de miembros\n"
        "existe = 2 in numeros  # True\n"
        "\n"
        "# 5. Longitud del conjunto\n"
        "longitud = len(numeros)  # 5 (número de elementos)\n"
        "```\n"
        "Operaciones comunes\n"
        "```python\n"
        "# Unión de conjuntos\n"
        "a = {1, 2, 3}\n"
        "b = {3, 4, 5}\n"
        "union = a | b  # {1, 2, 3, 4, 5}\n"
        "\n"
        "# Intersección de conjuntos\n"
        "interseccion = a & b  # {3}\n"
        "\n"
        "# Diferencia de conjuntos\n"
        "diferencia = a - b  # {1, 2}\n"
        "\n"
        "# Diferencia simétrica de conjuntos\n"
        "diferencia_simetrica = a ^ b  # {1, 2, 4, 5}\n"
        "```\n"
        "Casos especiales\n"
        "```python\n"
        "# Conjuntos inmutables (frozenset)\n"
        "inmutable = frozenset([1, 2, 3, 4, 5])\n"
        "\n"
        "# Métodos adicionales\n"
        "numeros.update({7, 8})  # {1, 2, 4, 5, 6, 7, 8} (agrega múltiples elementos)\n"
        "numeros.clear()  # Vacía el conjunto\n"
        "```\n"
        "Aplicaciones prácticas\n"
        "```python\n"
        "# 1. Eliminación de duplicados\n"
        "lista_con_duplicados = [1, 2, 2, 3, 4, 4, 5]\n"
        "sin_duplicados = list(set(lista_con_duplicados))  # [1, 2, 3, 4, 5]\n"
        "\n"
        "# 2. Operaciones de conjunto en bases de datos\n"
        "usuarios_A = {'Alice', 'Bob', 'Charlie'}\n"
        "usuarios_B = {'Bob', 'David'}\n"
        "usuarios_en_ambos = usuarios_A & usuarios_B  # {'Bob'}\n"
        "\n"
        "# 3. Filtrado de elementos únicos\n"
        "palabras = ['python', 'java', 'python', 'c++']\n"
        "unicas = set(palabras)  # {'python', 'java', 'c++'}\n"
        "```\n"
        "Precauciones importantes\n"
        "```python\n"
        "# 1. Los conjuntos no mantienen el orden\n"
        "conjunto = {3, 1, 2}\n"
        "for elemento in conjunto:\n"
        "    print(elemento)\n"
        "# La salida puede ser en cualquier orden\n"
        "\n"
        "# 2. Los elementos del conjunto deben ser inmutables\n"
        "try:\n"
        "    conjunto = {1, [2, 3]}  # Error: TypeError\n"
        "except TypeError:\n"
        "    print(\"Los elementos del conjunto deben ser inmutables\")\n"
        "\n"
        "# 3. Métodos de modificación no están disponibles en frozenset\n"
        "try:\n"
        "    inmutable.add(6)  # Error: AttributeError\n"
        "except AttributeError:\n"
        "    print(\"frozenset es inmutable\")\n"
        "```\n"
        "¿Cuándo usar conjuntos?\n"
        "- Almacenar colecciones de elementos únicos\n"
        "- Realizar operaciones de conjuntos como unión, intersección y diferencia\n"
        "- Filtrar elementos duplicados de una colección\n"
        "- Implementar operaciones de lógica de conjuntos en algoritmos\n"
    ),    
            (
        "diccionarios",
        "¿Qué es un diccionario en Python?\n\n"
        "Los diccionarios son estructuras de datos que almacenan pares clave-valor. Son mutables y permiten el acceso rápido a los valores mediante sus claves.\n\n"
        "Ejemplo de uso práctico\n"
        "```python\n"
        "# 1. Creación de diccionarios\n"
        "vacio = {}  # Diccionario vacío\n"
        "alumnos = {'Juan': 85, 'Ana': 92, 'Luis': 78}  # Diccionario con claves y valores\n"
        "\n"
        "# 2. Acceso a valores\n"
        "nota_ana = alumnos['Ana']  # 92 (acceso mediante clave)\n"
        "\n"
        "# 3. Adición y modificación de elementos\n"
        "alumnos['Pedro'] = 88  # {'Juan': 85, 'Ana': 92, 'Luis': 78, 'Pedro': 88}\n"
        "alumnos['Luis'] = 80  # {'Juan': 85, 'Ana': 92, 'Luis': 80, 'Pedro': 88} (modifica valor)\n"
        "```\n"
        "Operaciones comunes\n"
        "```python\n"
        "# Eliminación de elementos\n"
        "del alumnos['Juan']  # {'Ana': 92, 'Luis': 80, 'Pedro': 88}\n"
        "nota_pedro = alumnos.pop('Pedro')  # 88 y {'Ana': 92, 'Luis': 80}\n"
        "\n"
        "# Comprobación de existencia\n"
        "existe_ana = 'Ana' in alumnos  # True\n"
        "\n"
        "# Longitud del diccionario\n"
        "num_alumnos = len(alumnos)  # 2 (número de pares clave-valor)\n"
        "```\n"
        "Casos especiales\n"
        "```python\n"
        "# Recorrido de diccionarios\n"
        "for clave, valor in alumnos.items():\n"
        "    print(f'{clave}: {valor}')\n"
        "\n"
        "# Métodos útiles\n"
        "claves = alumnos.keys()  # dict_keys(['Ana', 'Luis'])\n"
        "valores = alumnos.values()  # dict_values([92, 80])\n"
        "pares = alumnos.items()  # dict_items([('Ana', 92), ('Luis', 80)])\n"
        "```\n"
        "Aplicaciones prácticas\n"
        "```python\n"
        "# 1. Contar frecuencia de elementos\n"
        "frutas = ['manzana', 'banana', 'manzana', 'naranja', 'banana', 'manzana']\n"
        "conteo = {}\n"
        "for fruta in frutas:\n"
        "    if fruta in conteo:\n"
        "        conteo[fruta] += 1\n"
        "    else:\n"
        "        conteo[fruta] = 1\n"
        "print(conteo)  # {'manzana': 3, 'banana': 2, 'naranja': 1}\n"
        "\n"
        "# 2. Almacenar configuraciones\n"
        "config = {'host': 'localhost', 'port': 8080, 'debug': True}\n"
        "\n"
        "# 3. Conversión entre diccionarios y listas de tuplas\n"
        "lista_tuplas = list(alumnos.items())  # [('Ana', 92), ('Luis', 80)]\n"
        "nuevo_diccionario = dict(lista_tuplas)  # {'Ana': 92, 'Luis': 80}\n"
        "```\n"
        "Precauciones importantes\n"
        "```python\n"
        "# 1. Claves únicas\n"
        "alumnos = {'Juan': 85, 'Ana': 92, 'Juan': 78}  # La segunda clave 'Juan' sobrescribe la primera\n"
        "print(alumnos)  # {'Juan': 78, 'Ana': 92}\n"
        "\n"
        "# 2. Claves inmutables\n"
        "try:\n"
        "    diccionario = {[1, 2]: 'valor'}  # Error: TypeError\n"
        "except TypeError:\n"
        "    print(\"Las claves deben ser inmutables\")\n"
        "\n"
        "# 3. Métodos de modificación no están disponibles en vistas de diccionario\n"
        "try:\n"
        "    claves = alumnos.keys()\n"
        "    claves.append('nuevo')  # Error: AttributeError\n"
        "except AttributeError:\n"
        "    print(\"Las vistas de diccionario son dinámicas pero no modificables\")\n"
        "```\n"
        "¿Cuándo usar diccionarios?\n"
        "- Almacenar pares clave-valor para acceso rápido\n"
        "- Contar frecuencia de elementos\n"
        "- Almacenar configuraciones y opciones\n"
        "- Modelar datos estructurados como registros\n"
    ),
            (
        "operadores aritmeticos",
        "** Operadores Aritméticos en Python\n\n"
        "son símbolos que se utilizan para realizar operaciones matemáticas sobre valores numéricos. Estos operadores incluyen:\n"
        "- Suma (+):  Suma dos valores.\n"
        "- Resta (-): Resta el segundo valor del primero.\n"
        "- Multiplicación (*): Multiplica dos valores.\n"
        "- División (/): Divide el primer valor por el segundo y devuelve un resultado con decimales.\n"
        "- División entera (//): Divide y devuelve solo la parte entera del resultado, sin decimales.\n"
        "- Módulo (%): Devuelve el resto de la división.\n"
        "- Potenciación ()**: Eleva un número a la potencia de otro.\n\n"
        "**Ejemplo detallado**\n"
        "```python\n"
        "# Definimos dos números\n"
        "a = 10\n"
        "b = 3\n\n"
        "# Realizamos operaciones aritméticas\n"
        "suma = a + b              # 10 + 3 = 13\n"
        "resta = a - b             # 10 - 3 = 7\n"
        "multiplicacion = a * b    # 10 * 3 = 30\n"
        "division = a / b          # 10 / 3 = 3.3333...\n"
        "division_entera = a // b  # 10 // 3 = 3\n"
        "modulo = a % b            # 10 % 3 = 1 (resto de la división)\n"
        "potencia = a ** b         # 10^3 = 1000\n\n"
        "# Imprimimos los resultados\n"
        'print(f"Suma: {suma}")\n'
        'print(f"Resta: {resta}")\n'
        'print(f"Multiplicación: {multiplicacion}")\n'
        'print(f"División: {division}")\n'
        'print(f"División Entera: {division_entera}")\n'
        'print(f"Módulo: {modulo}")\n'
        'print(f"Potencia: {potencia}")\n'
        "```\n"
        "**Desglose de cada paso**\n"
        "Definimos las variables:\n"
        "a = 10 \n"
        "b = 3\n\n"
        "Realizamos las operaciones y guardamos los resultados en variables:\n"
        "suma = 10 + 3 = 13\n"
        "resta = 10 - 3 = 7\n"
        "multiplicacion = 10 * 3 = 30\n"
        "division = 10 / 3 ≈ 3.3333...\n"
        "division_entera = 10 // 3 = 3 (descarta los decimales)\n"
        "modulo = 10 % 3 = 1 (el residuo de dividir 10 entre 3 es 1)\n"
        "potencia = 10 ** 3 = 1000 (10 elevado a la 3)\n\n"
        "Mostramos los resultados con **print()**, usando **f-strings** para formatear la salida.\n"
        "Salida esperada en consola:\n"
        "```python\n"
        "Suma: 13\n"
        "Resta: 7\n"
        "Multiplicación: 30\n"
        "División: 3.3333333333333335\n"
        "División Entera: 3\n"
        "Módulo: 1\n"
        "Potencia: 1000\n"
        "```\n"
),
    (
        "operadores logicos",
        "** Operadores Lógicos en Python\n\n"
        "son símbolos que se utilizan para combinar valores booleanos y realizar operaciones lógicas. Estos operadores incluyen:\n"
        "- AND (y): Devuelve True si ambos operandos son True.\n"
        "- OR (o): Devuelve True si al menos uno de los operandos es True.\n"
        "- NOT (no): Invierte el valor lógico del operando.\n\n"
        "**Ejemplo detallado**\n"
        "```python\n"
        "# Definimos dos valores booleanos\n"
        "a = True\n"
        "b = False\n\n"
        "# Realizamos operaciones lógicas\n"
        "resultado_and = a and b      # True and False = False\n"
        "resultado_or = a or b        # True or False = True\n"
        "resultado_not_a = not a      # not True = False\n"
        "resultado_not_b = not b      # not False = True\n\n"
        "# Imprimimos los resultados\n"
        'print(f"AND: {resultado_and}")\n'
        'print(f"OR: {resultado_or}")\n'
        'print(f"NOT a: {resultado_not_a}")\n'
        'print(f"NOT b: {resultado_not_b}")\n'
        "```\n"
        "**Desglose de cada paso**\n"
        "Definimos las variables:\n"
        "a = True \n"
        "b = False\n\n"
        "Realizamos las operaciones y guardamos los resultados en variables:\n"
        "resultado_and = True and False = False\n"
        "resultado_or = True or False = True\n"
        "resultado_not_a = not True = False\n"
        "resultado_not_b = not False = True\n\n"
        "Mostramos los resultados con **print()**, usando **f-strings** para formatear la salida.\n"
        "Salida esperada en consola:\n"
        "```python\n"
        "AND: False\n"
        "OR: True\n"
        "NOT a: False\n"
        "NOT b: True\n"
        "```\n"
    ),
        (
        "operadores de comparacion",
        "** Operadores de Comparación en Python\n\n"
        "son símbolos que se utilizan para comparar dos valores y devolver un valor booleano (True o False). Estos operadores incluyen:\n"
        "- Igual a (==): Devuelve True si ambos valores son iguales.\n"
        "- Distinto de (!=): Devuelve True si los valores son diferentes.\n"
        "- Mayor que (>): Devuelve True si el primer valor es mayor que el segundo.\n"
        "- Menor que (<): Devuelve True si el primer valor es menor que el segundo.\n"
        "- Mayor o igual que (>=): Devuelve True si el primer valor es mayor o igual que el segundo.\n"
        "- Menor o igual que (<=): Devuelve True si el primer valor es menor o igual que el segundo.\n\n"
        "**Ejemplo detallado**\n"
        "```python\n"
        "# Definimos dos números\n"
        "a = 10\n"
        "b = 3\n\n"
        "# Realizamos comparaciones\n"
        "igual = a == b               # 10 == 3 = False\n"
        "diferente = a != b           # 10 != 3 = True\n"
        "mayor = a > b                # 10 > 3 = True\n"
        "menor = a < b                # 10 < 3 = False\n"
        "mayor_o_igual = a >= b       # 10 >= 3 = True\n"
        "menor_o_igual = a <= b       # 10 <= 3 = False\n\n"
        "# Imprimimos los resultados\n"
        'print(f"Igual: {igual}")\n'
        'print(f"Diferente: {diferente}")\n'
        'print(f"Mayor: {mayor}")\n'
        'print(f"Menor: {menor}")\n'
        'print(f"Mayor o Igual: {mayor_o_igual}")\n'
        'print(f"Menor o Igual: {menor_o_igual}")\n'
        "```\n"
        "**Desglose de cada paso**\n"
        "Definimos las variables:\n"
        "a = 10 \n"
        "b = 3\n\n"
        "Realizamos las operaciones y guardamos los resultados en variables:\n"
        "igual = 10 == 3 = False\n"
        "diferente = 10 != 3 = True\n"
        "mayor = 10 > 3 = True\n"
        "menor = 10 < 3 = False\n"
        "mayor_o_igual = 10 >= 3 = True\n"
        "menor_o_igual = 10 <= 3 = False\n\n"
        "Mostramos los resultados con **print()**, usando **f-strings** para formatear la salida.\n"
        "Salida esperada en consola:\n"
        "```python\n"
        "Igual: False\n"
        "Diferente: True\n"
        "Mayor: True\n"
        "Menor: False\n"
        "Mayor o Igual: True\n"
        "Menor o Igual: False\n"
        "```\n"
    ),
        (
        "operadores de asignacion",
        "** Operadores de Asignación en Python\n\n"
        "son utilizados para asignar valores a las variables. Además del operador de asignación simple (=), Python proporciona varios operadores de asignación compuestos para realizar operaciones aritméticas y asignar el resultado a la misma variable. Estos operadores incluyen:\n"
        "- Asignación (=): Asigna un valor a una variable.\n"
        "- Suma y asigna (+=): Suma un valor a la variable y asigna el resultado a la misma variable.\n"
        "- Resta y asigna (-=): Resta un valor a la variable y asigna el resultado a la misma variable.\n"
        "- Multiplica y asigna (*=): Multiplica un valor a la variable y asigna el resultado a la misma variable.\n"
        "- Divide y asigna (/=): Divide un valor a la variable y asigna el resultado a la misma variable.\n"
        "- Divide enteramente y asigna (//=): Divide enteramente un valor a la variable y asigna el resultado a la misma variable.\n"
        "- Módulo y asigna (%=): Calcula el módulo de la variable con un valor y asigna el resultado a la misma variable.\n"
        "- Potencia y asigna (**=): Eleva la variable a la potencia de un valor y asigna el resultado a la misma variable.\n\n"
        "**Ejemplo detallado**\n"
        "```python\n"
        "# Definimos una variable\n"
        "a = 10\n\n"
        "# Realizamos operaciones de asignación\n"
        "a += 3  # a = a + 3 -> 13\n"
        "a -= 2  # a = a - 2 -> 11\n"
        "a *= 4  # a = a * 4 -> 44\n"
        "a /= 2  # a = a / 2 -> 22.0\n"
        "a //= 3  # a = a // 3 -> 7.0\n"
        "a %= 4  # a = a % 4 -> 3.0\n"
        "a **= 2  # a = a ** 2 -> 9.0\n\n"
        "# Imprimimos los resultados\n"
        'print(f"Asignación: a = {a}")\n'
        'print(f"Suma y Asigna: a += 3 -> {a}")\n'
        'print(f"Resta y Asigna: a -= 2 -> {a}")\n'
        'print(f"Multiplica y Asigna: a *= 4 -> {a}")\n'
        'print(f"Divide y Asigna: a /= 2 -> {a}")\n'
        'print(f"Divide Enteramente y Asigna: a //= 3 -> {a}")\n'
        'print(f"Módulo y Asigna: a %= 4 -> {a}")\n'
        'print(f"Potencia y Asigna: a **= 2 -> {a}")\n'
        "```\n"
        "**Desglose de cada paso**\n"
        "Definimos la variable:\n"
        "a = 10\n\n"
        "Realizamos las operaciones y asignamos los resultados a la misma variable:\n"
        "a += 3  -> 13\n"
        "a -= 2  -> 11\n"
        "a *= 4  -> 44\n"
        "a /= 2  -> 22.0\n"
        "a //= 3  -> 7.0\n"
        "a %= 4  -> 3.0\n"
        "a **= 2  -> 9.0\n\n"
        "Mostramos los resultados con **print()**, usando **f-strings** para formatear la salida.\n"
        "Salida esperada en consola:\n"
        "```python\n"
        "Asignación: a = 9.0\n"
        "Suma y Asigna: a += 3 -> 9.0\n"
        "Resta y Asigna: a -= 2 -> 9.0\n"
        "Multiplica y Asigna: a *= 4 -> 9.0\n"
        "Divide y Asigna: a /= 2 -> 9.0\n"
        "Divide Enteramente y Asigna: a //= 3 -> 9.0\n"
        "Módulo y Asigna: a %= 4 -> 9.0\n"
        "Potencia y Asigna: a **= 2 -> 9.0\n"
        "```\n"
    ),
            (
         "estructuras de control",
         "**Estructuras de control en Python**\n\n"
         "son mecanismos que permiten modificar el flujo de ejecución de un programa. Se dividen en tres tipos principales:\n\n"
         "- **Estructuras condicionales ** ( if , elif , else)\n"
         "Permiten ejecutar diferentes bloques de código según si una condición es verdadera o falsa.\n\n"
         "- **Estructuras de bucles o iterativas ** ( for , while )\n"
         "Permiten repetir un bloque de código varias veces.\n"
         "**for:** Se usa para recorrer elementos de una secuencia (listas, tuplas, cadenas, etc.).\n"
         "**while: ** Repite un bloque mientras una condición específica sea verdadera.\n\n"
         "- **Estructuras de control de flujo ** ( break , continue , pass )\n"
         "**break:** Detiene completamente la ejecución del bucle.\n"
         "**continue:** Salta a la siguiente iteración del bucle sin ejecutar el código restante de la iteración actual.\n"
         "**pass:** No hace nada, se usa como marcador de posición en estructuras vacías."       
    ),
    (
        "condicionales",
        "**Condicionales en Python:** if - elif - else\n\n"
        "Las estructuras condicionales permiten ejecutar diferentes bloques de código según si una condición es\n"
        "verdadera o falsa. Se basan en la palabra clave if y pueden incluir elif y else.\n\n"
        "**1. Condición simple con if**\n\n"
        "Ejecuta un bloque de código solo si la condición es verdadera.\n"
        "```python\n"
        "edad = 18\n\n"
        "if edad >= 18:  # Si la edad es mayor o igual a 18\n"
        '      print("Eres mayor de edad")\n'
        "```\n"
        " Explicación paso a paso\n\n"
        "- Definimos edad = 18.\n"
        '- Evaluamos edad >= 18. Como es verdadero, se ejecuta print("Eres mayor de edad").\n'
        "- Si la condición fuese falsa, no se ejecutaría nada.\n\n"
        "Salida esperada\n"
        "```python\n"
        "Eres mayor de edad\n"
        "```\n"
        "**2. Condición con if - else**\n\n"
        "Se usa cuando queremos ejecutar una acción si la condición es verdadera y otra si es falsa.\n"
        "```python\n"
        "edad = 16\n\n"
        "if edad >= 18:\n"
        '    print("Eres mayor de edad")\n'
        "else:\n"
        '    print("Eres menor de edad")\n'
        "```\n"
        "**Explicación paso a paso**\n\n"
        "- Definimos edad = 16.\n"
        "- Evaluamos edad >= 18. Como es falso, se ejecuta el bloque dentro de else.\n"
        '- Se imprime "Eres menor de edad".\n\n'
        "Salida esperada:\n"
        "```python\n"
        "Eres menor de edad\n"
        "```\n"
        "**3. Condición con if - elif - else**\n\n"
        "Se usa cuando hay varias condiciones posibles.\n"
        "```python\n"
        "nota = 85\n\n"
        "if nota >= 90:\n"
        '    print("Tienes una A")\n'
        "elif nota >= 80:\n"
        '    print("Tienes una B")\n'
        "elif nota >= 70:\n"
        '    print("Tienes una C")\n'
        "else:\n"
        '    print("Has reprobado")\n'
        "```\n"
        "**Explicación paso a paso**\n\n"
        "- nota = 85\n" 
        "- Se evalúa nota >= 90. Como es falso, pasa al siguiente elif.\n"
        '- Se evalúa nota >= 80. Como es verdadero, se ejecuta print("Tienes una B").\n'
        "- No se evalúan más condiciones porque ya se encontró una verdadera.\n\n"
        "**Salida esperada:**\n"
        "```python\n"
        "Tienes una B\n"
        "```\n"
        "**4. Condiciones anidadas (if dentro de if)\n\n"
        "Se usa cuando una condición depende de otra.\n"
        "```python\n"
        "edad = 20\n"
        "tiene_licencia = True\n\n"
        "if edad >= 18:\n"
        '    if tiene_licencia:\n'
        '        print("Puedes conducir")\n'
        "    else:\n"
        '        print("Necesitas una licencia")\n'
        "else:\n"
        '    print("Eres menor de edad, no puedes conducir")\n'
        "```\n"
        "Salida esperada:\n"
        "```python\n"
        "Puedes conducir\n"
        "```\n"
        "**5. Condición con operadores lógicos (and, or, not)**\n\n"
        "Se usan para combinar múltiples condiciones.\n"
        "```python\n"
        'usuario = "admin"\n'
        'contrasena = "1234"\n\n'
        'if usuario == "admin" and contrasena == "1234":\n'
        '    print("Acceso permitido")\n'
        'else:\n'
        '    print("Acceso denegado")\n'
        "```\n"
        "Explicación paso a paso\n\n"
        '- Se verifica que ambas condiciones sean verdaderas (usuario == "admin" y contrasena == "1234").\n'
        '- Como las dos son verdaderas, imprime "Acceso permitido".\n'
        '- Si una de ellas fuera falsa, se ejecutaría el else.\n\n'
        "Salida esperada\n"
        "```python\n"
        "Acceso permitido\n"
        "```\n"

    ),
    (
        "if",
        "Ejecuta un bloque de código solo si la condición es verdadera.\n"
        "```python\n"
        "edad = 18\n\n"
        "if edad >= 18:  # Si la edad es mayor o igual a 18\n"
        '      print("Eres mayor de edad")\n'
        "```\n"
        " Explicación paso a paso\n\n"
        "- Definimos edad = 18.\n"
        '- Evaluamos edad >= 18. Como es verdadero, se ejecuta print("Eres mayor de edad").\n'
        "- Si la condición fuese falsa, no se ejecutaría nada.\n\n"
        "Salida esperada\n"
        "```python\n"
        "Eres mayor de edad\n"
        "```\n"
    ),
    (
        "for",
        "**Bucle for**\n\n"
        "Se usa cuando queremos recorrer una secuencia de elementos (listas, cadenas, rangos, etc.).\n"
        "```python\n"
        "for i in range(1, 6):  # Recorre los números del 1 al 5\n"
        '    print(f"Número: {i}")\n'
        "```\n"
        "Explicación Paso a Paso\n\n"
        "- range(1, 6) genera los números 1, 2, 3, 4, 5 (el 6 no se incluye).\n"
        "- En cada iteración, la variable i toma un valor de la secuencia.\n"
        '- print(f"Número: {i}") muestra cada número en la consola.\n\n'
        "Salida esperada:\n"
        "```python\n"
        "Número: 1\n"
        "Número: 2\n"
        "Número: 3\n"
        "Número: 4\n"
        "Número: 5\n"
        "```\n"
    ),
       (
        "while",
        "**Bucle while**\n\n"
        "Se usa cuando queremos repetir un bloque mientras una condición sea verdadera.\n"
        "```python\n"
        "contador = 1\n\n"
        'while contador <= 5:  # Se repite mientras contador sea menor o igual a 5\n'
        '    print(f"Contador: {contador}")\n'
        '    contador += 1  # Incrementamos el contador en 1\n'
        "```\n"
        "Explicación Paso a Paso\n\n"
        "- Definimos contador = 1.\n"
        "- Se verifica contador <= 5, si es verdadero, se ejecuta el bloque dentro del while.\n"
        '- Se imprime el valor de contador y luego se incrementa en 1.\n'
        "- Cuando contador = 6, la condición es falsa y el bucle se detiene.\n\n"
        "Salida esperada:\n"
        "```python\n"
        "Contador: 1\n"
        "Contador: 2\n"
        "Contador: 3\n"
        "Contador: 4\n"
        "Contador: 5\n"
        "```\n"
    ),

           (
        "break",
        "**Control de flujo en bucles | break**\n\n"
        "Se usa cuando queremos Salir del bucle antes de tiempo.\n"
        "```python\n"
        "for num in range(1, 10):\n"
        '    if num == 5:\n'
        '        print("Se encontró el 5, saliendo del bucle...")\n'
        '        break  # Sale del bucle cuando num es 5\n'
        '    print(f"Número: {num}")\n'
        "```\n"
        "Salida esperada:\n"
        "```python\n"
        "Número: 1\n"
        "Número: 2\n"
        "Número: 3\n"
        "Número: 4\n"
        "Se encontró el 5, saliendo del bucle... \n"
        "```\n"
    ),
           (
        "continue",
        "**Control de flujo en bucles | continue**\n\n"
        "Se usa cuando queremosSaltar una iteración y seguir con la siguiente.\n"
        "```python\n"
        "for num in range(1, 6):\n"
        '    if num == 3:\n'
        '        print("Saltando el número 3...")\n'
        '        continue  # Salta esta iteración y sigue con la siguiente\n'
        '    print(f"Número: {num}")\n'
        "```\n"
        "Salida esperada:\n"
        "```python\n"
        "Número: 1\n"
        "Número: 2\n"
        "Saltando el número 3...\n"
        "Número: 4\n"
        "Número: 5\n"
        "```\n"
    ),
               (
        "pass",
        "**Control de flujo en bucles | pass**\n\n"
        "Marcador de posición, no hace nada\n"
        "```python\n"
        "for num in range(1, 6):\n"
        '    if num == 3:\n'
        '        pass  # No hace nada, solo mantiene la estructura válida\n'
        '    print(f"Número: {num}")\n'
        "```\n"
        "Salida esperada:\n"
        "```python\n"
        "Número: 1\n"
        "Número: 2\n"
        "Número: 3\n"
        "Número: 4\n"
        "Número: 5\n"
        "```\n"
    ),
    (
        "funcion python",
        "La función calculará el factorial de un número usando un bucle for.\n"
        "```python\n"
        "# Definimos una función llamada factorial que recibe un número n como parámetro\n"
        "def factorial(n):\n"
        '    """\n\n'
        "    Calcula el factorial de un número entero positivo.\n\n"
        "    Parámetros:\n"
        "    n (int): El número del que queremos calcular el factorial.\n\n"
        "    Retorna:\n"
        "    int: El factorial del número n.\n"
        '     """\n\n'
        "    # Verificamos si el número es negativo\n"
        "    if n < 0:\n"
        '        return "No se puede calcular el factorial de un número negativo"\n\n'
        "    # Caso especial: el factorial de 0 es 1\n"
        "    if n == 0:\n"
        "        return 1\n\n"
        " # Inicializamos una variable para almacenar el resultado del factorial\n"
        "    resultado = 1\n\n"
        "    # Usamos un bucle for para multiplicar los números desde 1 hasta n\n"
        '  for i in range(1, n + 1):  # El rango va de 1 a n (incluyendo n)\n'
        "        resultado *= i  # Multiplicamos el resultado por el valor de i\n\n"
        "    # Retornamos el resultado final\n"
        "    return resultado\n\n"
        "# Solicitamos un número al usuario\n"
        'numero = int(input("Ingrese un número para calcular su factorial: "))\n\n'
        "# Llamamos a la función factorial y mostramos el resultado\n"
        'print(f"El factorial de {numero} es: {factorial(numero)}")\n'
        "```\n"
        "**Explicación paso a paso**\n\n"
        "- Definimos la función factorial(n) con un parámetro n.\n"
        "- Verificamos si n es negativo. Si lo es, devolvemos un mensaje de error.\n"
        "- Manejamos el caso especial n == 0, devolviendo 1.\n"
        "- Inicializamos resultado = 1 para almacenar el cálculo.\n"
        "- Iteramos con for i in range(1, n + 1) para multiplicar todos los números desde 1 hasta n.\n"
        "- Multiplicamos resultado *= i en cada iteración.\n"
        "- Retornamos el valor final después de completar el bucle.\n"
        "- Pedimos al usuario un número y mostramos el resultado usando print().\n\n"
        "Ejemplo de ejecución:\n"
        "```python\n"
        "Ingrese un número para calcular su factorial: 5\n"
        "El factorial de 5 es: 120\n"
        "```\n"
    ),
        (
        "palindromo",
        "Función para verificar si un número es palíndromo\n"
        "```python\n"
        "def es_palindromo(numero):\n\n"
        '    # Convertimos el número a cadena para poder invertirlo\n'
        "    numero_str = str(numero) \n\n"
        "    Invertimos la cadena y la comparamos con la original\n"
        "    if numero_str == numero_str[::-1]: \n"
        "        return True  # Es palíndromo\n"
        "    int: El factorial del número n.\n"
        '    else:\n'
        "        return False  # No es palíndromo\n\n"
        "**# Solicitamos un número al usuario**\n"
        'num = int(input("Ingrese un número: "))\n\n'
        "# Verificamos si es palíndromo e imprimimos el resultado\n"
        "if es_palindromo(num):\n"
        '    print(f"El número {num} es un palíndromo.")\n'
        "else:\n"
        '    print(f"El número {num} no es un palíndromo.")\n'
        "```\n"
        "**Explicación paso a paso**\n\n"
        "- Convertimos el número a cadena con str(numero), para poder manipularlo.\n"
        "- Invertimos la cadena usando [::-1] y la comparamos con la original.\n"
        "- Si son iguales, el número es un palíndromo y la función retorna True.\n"
        "- Si no son iguales, retorna False.\n"
        "- Pedimos al usuario un número, llamamos la función y mostramos el resultado.\n\n"
        "Ejemplo de ejecución:\n"
        "```python\n"
        "Ingrese un número: 12321\n"
        "El número 12321 es un palíndromo.\n"
        "```\n"
    ),

    ]

    for prompt, response in prompts_responses:
        add_or_update_predefined_prompt(prompt, response)